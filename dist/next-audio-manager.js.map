{"version":3,"sources":["next-audio-manager.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"next-audio-manager.js","sourcesContent":["(function () {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('@feizheng/next-js-core2');\n  var NxAudio = nx.Audio || require('@feizheng/next-audio');\n  var DEFAULT_OPTIONS = { key: 'nxam', standalone: false };\n  var MSG_KEY_CONFLICT = 'Key conflict, please change one.'\n\n  var NxAudioManager = nx.declare('nx.AudioManager', {\n    statics: {\n      _instances: [],\n      create: function (inOptions) {\n        if (Array.isArray(inOptions)) {\n          return inOptions.map(function (option) {\n            return this.create(option);\n          }, this)\n        }\n        return new this(inOptions);\n      },\n      gets: function () {\n        return this._instances;\n      },\n      get: function (inKey) {\n        var instances = this.gets();\n        return instances.find(function (item) {\n          return item.key === inKey;\n        });\n      },\n      'method,property': function (inName) {\n        return function () {\n          var args = arguments;\n          var instances = this.gets();\n          return instances.map(function (instance) {\n            var ctx = instance.value;\n            return ctx[inName].apply(ctx, args);\n          });\n        };\n      }\n    },\n    methods: {\n      init: function (inOptions) {\n        var options = this.options = nx.mix(null, DEFAULT_OPTIONS, inOptions);\n        var element = this.element = new Audio();\n        var instances = NxAudioManager.gets();\n\n        this.context = new NxAudio(element, options);\n        nx.mix(element, options);\n\n        var item = instances.find(function (item) { return item.key === options.key });\n        if (item) nx.error(MSG_KEY_CONFLICT);\n        !options.standalone && instances.push({\n          key: options.key,\n          value: this\n        });\n      },\n      method: function (inName) {\n        var args = nx.slice(arguments, 1);\n        var ctx = this.context;\n        return ctx[inName].apply(ctx, args);\n      },\n      property: function (inName, inValue) {\n        var ctx = this.context;\n        if (typeof inValue === 'undefined') {\n          return ctx[inName];\n        }\n        return ctx[inName] = inValue;\n      }\n    }\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NxAudioManager;\n  }\n})();\n"]}